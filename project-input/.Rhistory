x <- list(a = 1:4, b = rnorm(10))
x
x$a
lapply(x, mean)
a <- list(1:4, rnorm(10))
a
class(a)
y <- unclass(a)
y
class(y)
help(names)
names(a) <- c("first", "second")
a
help(apply)
help(tapply)
a <- rnorm(10)
a
a <- matrix()
x
a
a <- matrix(1:10,2,5)
a
solve(a)
## Put comments here that give an overall description of what your
## functions do
## Container function for holding the base matrix and the inverted matrix;
## includes functions for getting and setting both matrices
makeCacheMatrix <- function(x = matrix()) {
#Cache to hold the inverted matrix
invertedMatric <- NULL;
#Function for setting a new base matrix
set <- function(y) {
x <<- y
invertedMatrix <<- NULL
}
#Function for getting the base matrix
get <- function() {
x
}
#Function for retrieving the inverted matrix
getInvertedMatrix <- function() {
invertedMatrix
}
#Function for setting the inverted matrix
setInvertedMatrix <- function(w) {
invertedMatrix <<- w
}
list(set = set, get = get,
setInvertedMatrix = setInvertedMatrix,
getInvertedMatrix = getInvertedMatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
a <- mackeCacheMatrix(matrix(1:9,3,3))
a <- makeCacheMatrix(matrix(1:9,3,3))
a
a$get
a$get()
a$getInvertedMatrix()
## Put comments here that give an overall description of what your
## functions do
## Container function for holding the base matrix and the inverted matrix;
## includes functions for getting and setting both matrices
makeCacheMatrix <- function(x = matrix()) {
#Cache to hold the inverted matrix
invertedMatrix <- NULL;
#Function for setting a new base matrix
set <- function(y) {
x <<- y
invertedMatrix <<- NULL
}
#Function for getting the base matrix
get <- function() {
x
}
#Function for retrieving the inverted matrix
getInvertedMatrix <- function() {
invertedMatrix
}
#Function for setting the inverted matrix
setInvertedMatrix <- function(w) {
invertedMatrix <<- w
}
list(set = set, get = get,
setInvertedMatrix = setInvertedMatrix,
getInvertedMatrix = getInvertedMatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
a <- makeCacheMatrix(matrix(1:9,3,3))
a$getInvertedMatrix()
## Put comments here that give an overall description of what your
## functions do
## Container function for holding the base matrix and the inverted matrix;
## includes functions for getting and setting both matrices
makeCacheMatrix <- function(x = matrix()) {
#Cache to hold the inverted matrix
invertedMatrix <- NULL;
#Function for setting a new base matrix
set <- function(y) {
x <<- y
invertedMatrix <<- NULL  #Since base matrix has changed, negate the inverted matrix
}
#Function for getting the base matrix
get <- function() {
x
}
#Function for retrieving the inverted matrix
getInvertedMatrix <- function() {
invertedMatrix
}
#Function for setting the inverted matrix
setInvertedMatrix <- function(w) {
invertedMatrix <<- w
}
list(set = set, get = get,
setInvertedMatrix = setInvertedMatrix,
getInvertedMatrix = getInvertedMatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invert <- x$getInvertedMatrix()
#Check if the inverted matrix is cached
if (!is.null(invert)) {
print("Using cached inverted matrix")
} else {
print("Calculating inverted matrix")
invert <- solve(x$get())
# Cache the inverted matrix for future use
x$setInvertedMatrix(invert);
}
return(invert)
}
a <- makeCacheMatrix(matrix(1:9,3,3))
cacheSolve(a)
a
a$get()
solve(a$get())
is.singular.matrix(a)
library()
help(load0)
help(load)
?library()
library(matrixcalc)
a <- matrix(rnorm(9),3,3)
a
a <- makeCacheMatrix(matrix(rnorm(9),3,3))
a
a$get()
solve(a$get())
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
a$set(matrix(rnorm(81),9,9))
a$get()
a$set(matrix(rnorm(144),12,12))
a$get()
cacheSolve(a)
cacheSolve (a)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invert <- x$getInvertedMatrix()
#Check if the inverted matrix is cached
if (!is.null(invert)) {
print("Using cached inverted matrix")
} else {
print("Calculating inverted matrix")
invert <- solve(x$get())
# Cache the inverted matrix for future use
x$setInvertedMatrix(invert);
}
invisible(invert)
}
cacheSolve(a)
sol <- cacheSolve(a)
sol
a$set(matrix(rnorm(1234567 * 1234567),1234567,1234567))
a$set(matrix(rnorm(1234 * 1234),1234,1234))
test <- a$get()
a$getInvertedMatrix()
cacheSolve(a)
cacheSolve(a)
a$set(matrix(rnorm(12345 * 12345),12345,12345))
a$set(matrix(rnorm(9000 * 9000),9000,9000))
test <- a$get()
a
help(list)
a$getInvertedMatrix()
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
a$set(matrix(rnorm(5000 * 5000),5000,5000))
a$getInvertedMatrix()
cacheSolve(a)
test <- a$getInvertedMatrix()
cacheSolve(a)
test2 <- a$getInvertedMatrix()
for (i in 1:5000) {}
for (i in 1:5000) {
for (j in 1:5000) {
if (test[i,j] != test2[i,j])
{
error("ERROR - Mismatched Values")
}
}
}
tes <- NULL
test <- NULL
test2 <- NULL
a$set(matrix(rnorm(9),3,3))
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x$get()
inv <- cacheSolve(x)
inv
inv <- cacheSolve(x)
inv
library(datasets)
data(iris)
?iris
iris
split(iris)
split(iris, iris$Species)
splitData <- split(iris, iris$Species)
splitData$virginica
mean(split$Virginca)
mean(split$Virginica)
mean(split$Virginica$Sepal.Length)
mean((split$Virginica)$Sepal.Length)
mean(split$Virginica)
splitData$virginica
lapply(split$Virginica, mean)
splitData$virginica()
mean(split$Virginica[1])
mean(split$Virginica[1,])
v <- split$Virginica
lapply(split, function(x) colMeans(x[,c("Sepal.Length")]))
apply(split$Virginica, 2, mean)
lapply(split(iris, iris$Species), mean)
lapply(split(iris, iris$Species), mean, na.rm = TRUE)
sapply(split(iris, iris$Species), mean, na.rm = TRUE)
split
iris
splitData$1
splitData$Virginica
splitData <- split(iris, iris$Species)
splitData$Virginica
splitData
splitData$virginica
splitData$virginica$Sepal.length
lapply(splitData$virginica, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
test <- with(mtcars, tapply(hp, cyl, mean))
test
test$4
test[1]
test[1] - test[8]
test["4"] - test["8"]
?aggregate
set.seed(1)
rpois(5, 2)
?qpois
?rep
x <- rep(0:1, each=5)
x
set.seed(1)
x <- rnorm(100)
x
?qnorm
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(y)
plot(x,y)
install.packages("swirl")
library(swirl)
rm(list=ls())
swirl()
5 +7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <-
c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Praik")
my_name
paste(my_name, collapse=" ")
paste("Hello", "World!", sep=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector_)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
indentical(my_matrix, my_matrix2)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbing(patients, my_matrix)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data) <- cnames
my_data
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 !=7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
TRUE | FALSE
xor(5 ==6, |FALSE)
xor(5 ==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
library(XML)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=TRUE)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=TRUE)
library(RCurl)
install.packages("RCurl")
library(RCurl)
xData <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
doc <- xmlParse(xData)
doc
xpathSApply()
xpathSApply(doc, "//zipcode")
xpathSApply(doc, "//zipcode[@zipcode=21211]")
xpathSApply(doc, "//zipcode[@zipcode=21211]", xmlValue)
test <- xpathSApply(doc, "//zipcode[@zipcode=21211]", xmlValue)
test
xpathSApply(doc, "//zipcode", xmlValue="21211")
xpathSApply(doc, "//zipcode", xmlValue)
length(test)
test
test <- xpathSApply(doc, "//zipcode", xmlValue)
length(test)
typeof(list)
typeof(test)
source('~/Coursera/Data Science Specialization/03 - Getting and Cleaning Data/working/quiz1.R')
countZip()
source('~/Coursera/Data Science Specialization/03 - Getting and Cleaning Data/working/quiz1.R')
countZip()
source('~/Coursera/Data Science Specialization/03 - Getting and Cleaning Data/working/quiz1.R')
countZip()
source('~/Coursera/Data Science Specialization/03 - Getting and Cleaning Data/working/quiz1.R')
countZip()
test <- xpathSApply(doc, "//zipcode", xmlValue)
length(test)
source('~/Coursera/Data Science Specialization/03 - Getting and Cleaning Data/working/quiz1.R')
countZip()
source('~/Coursera/Data Science Specialization/03 - Getting and Cleaning Data/working/quiz1.R')
countZip()
source('~/Coursera/Data Science Specialization/03 - Getting and Cleaning Data/working/quiz1.R')
countZip()
Sys.getenv("PATH")
library(rJava)
library(xlsc)
library(xlsx)
exit
setwd("C:\\Users\\P\\Documents\\Coursera\\Data Science Specialization\\03 - Getting and Cleaning Data\\Course Project\\UCI HAR Dataset")
#Read the names of the attribute columns
features <- read.table("features.txt")
#read the legend for the activity labels column
activityLegend <- read.table("activity_labels.txt")
#Activity Labels - read the training and test sets and combine them
activity <- rbind(read.table("train/y_train.txt"), read.table("test/y_test.txt"))
#Participant IDs - read the training and test sets and combine them
participants <- rbind(read.table("train/subject_train.txt"), read.table("test/subject_test.txt"))
#Measurements - read the training and test sets and combine them
measurements <- rbind(read.table("train/X_train.txt"), read.table("test/X_test.txt"))
head(features)
names(measurements)
names(measurements) <- features[,2]
names(measurements)
names(measurements) <- features[,2]
names(measurements)
grep(".*mean()|std()", names(measurements))
dt <- measurements[grep(".*mean()|std()", names(measurements)),]
combined <- cbind(participants, activity, measurements)
names(combined)
names(combined) <- c("Participant", "Activity")
names(combined)
names(combined) <- c("Participant", "Activity",features[,2])
names(combined)
#Activity Labels - read the training and test sets and combine them
activity <- rbind(read.table("train/y_train.txt"), read.table("test/y_test.txt"))
names(activity) <- c("Activity")
#Participant IDs - read the training and test sets and combine them
participants <- rbind(read.table("train/subject_train.txt"), read.table("test/subject_test.txt"))
names(participants) <- c("Participant")
#Measurements - read the training and test sets and combine them
measurements <- rbind(read.table("train/X_train.txt"), read.table("test/X_test.txt"))
#Set the column names on the measurements data table
names(measurements) <- features[,2]
#Combine the activity, participants, and measurement data sets together
combined <- cbind(participants, activity, measurements)
head(participants)
head(activity)
activity
names(combined)
dt <- combined[,grep(".*mean()|std()", names(measurements))]
?merge
activityLegend
test <- merge(dt, activityLegend, by.x="Activity", by.y="V1", all.x=TRUE)
head(test)
dt$newColumn <- activityLabels[dt$Activity]
dt$newColumn <- activityLegend[dt$Activity]
dt$newColumn <- activityLegend[dt$Activity,2]
dt$newColumn
head(dt$newColumn)
activityLegends
activityLegend
head(dt$Activity)
head(dt)
names(measurements) <- features[,2]
#Combine the activity, participants, and measurement data sets together
combined <- cbind(participants, activity, measurements)
#Extract the mean and standard deviation measurements
dt <- combined[,grep(".*mean()|std()", names(measurements))]
head(dt)
dt$Activity_Name <- activityLegend[dt$Activity_ID, 2]
dt$Activity_Name <- activityLegend[dt$Activity, 2]
dt$Activity_Name
names(dt)
